/* time compexity O(n^2) */
/* Brute Force approach */
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        for (int i=0; i< n; i++){
            int count = 0;
            for (int j=i+1; j<n; j++){
                if(nums[i]==nums[j]){
                    count ++ ;
                }
            }
            if(count>=n/2){
                int ans = nums[i];
                return ans;
            }
        }
        return -1;
    }
};

/* time compexity O(nlogn) */
/* Optimized approach */

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        
        sort(nums.begin(), nums.end());

        int count = 1 , ans = nums[0];

        for (int i=1; i<n; i++){
            if (nums[i]==nums[i-1]){
                count++;
            }
            else{
                count = 1;
                ans = nums[i];
            }

            if (count > n/2){
                return ans;
            }
        }
        return ans;
    }
};


/* time compexity O(n) */
/* Moore's voting algorithm */

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        
        int freq = 0, ans = nums[0];
        for(int i=0; i<n; i++){
            if(freq==0){
                ans= nums[i];
            }
            if (ans == nums[i]){
                freq++;
            }
            else {
                freq--;
            }
        }
        return ans;
    }
};
