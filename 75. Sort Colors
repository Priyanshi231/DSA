/* Time complexity O(n)  in this apprach there is 2 passes */

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int c0 = 0;
        int c1 = 0;
        int c2 = 0;
        for(int i=0; i<n; i++){
            if(nums[i] == 0){
                c0++;
            }
            if(nums[i] == 1){
                c1++;
            }
            else{
                c2++;
            }
        }
        int idx = 0;
        for(int i = 0; i<c0; i++){
            nums[idx++] = 0;
        }
        for(int i = 0; i<c1; i++){
            nums[idx++] = 1;
        }
        for(int i = 0; i<c2; i++){
            nums[idx++] = 2;
        }
    }
};

/* Time complexity O(n)  in this more optimised apprach there is 1 pass */

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int low = 0, mid = 0, high = n-1;

        while(mid <= high){
            if(nums[mid] == 0){
                swap( nums[low] , nums[mid]);
                low++;
                mid++;
            }
            else if(nums[mid] == 1){
                mid++;
            }
            else{
                swap( nums[mid] , nums[high]);
                high -- ;
            }
        }
    }
};
